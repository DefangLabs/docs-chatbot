[
    {
      "id": 1,
      "about": "Samples",
      "text": "Check out our sample projects here to get some inspiration and get a sense of how defang works. import Samples from \"../src/components/Samples\"; <Samples />"
    },
    {
      "id": 2,
      "about": "What is Defang?, Features",
      "text": "Defang is a radically simpler way for developers to develop, deploy, and debug their cloud applications. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly with AI-assisted tooling. - The [Defang CLI](./getting-started/installing.md) includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine. - Defang can automatically build and deploy your project with a single command. - If you’re new to Defang, you can try deploying to the [Defang Playground](./concepts/defang-playground.md), a hosted environment to learn to use Defang with non-production workloads. - Once you’re ready, you can [deploy](./concepts/deployments.md) it to your own cloud account - we call this [Defang BYOC](./concepts/defang-byoc.md). Defang takes care of all the heavy lifting such as configuring networking, security, [observability](./concepts/observability.md) and all the other details that usually slow down the average cloud developer. - You can also use Defang to easily [publish updates](./concepts/deployments.md#deploying-updates) to your deployed application with zero downtime. Defang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features: - Support for [various types of applications](./use-cases/use-cases.md): Web services and APIs, mobile app backends, ML services, hosting LLMs, etc. - Support for your programming [language of choice](./samples.md): Node.js, Python, Golang, or anything else you can package in a Dockerfile. - Built-in AI assistant to go [from natural language prompt to an outline project](./concepts/generate.md) - Built-in AI assistant to help you [debug your cloud applications](./concepts/debug.md) - Automated [Dockerfile builds](./concepts/deployments.md) - Support for [pre-built Docker containers](./tutorials/deploy-container-using-the-cli.mdx), from public or private image registries - Ability to express your project configuration using a [Docker Compose YAML](./concepts/compose.md) file - Ability to manage [encrypted configuration values](./concepts/configuration.md) - Pre-configured environments with built-in [security](./concepts/security.md), [networking](./concepts/networking.mdx), and [observability](./concepts/observability.md) - [One-command deployments](./getting-started/installing.md) - Support for [GPUs](./concepts/resources.md) - Support for Infra-as-Code via the [Defang Pulumi provider](./concepts/pulumi.md)"
    },
    {
      "id": 3,
      "about": "FAQ, Which cloud/region is the app being deployed to?, Can I bring my own AWS or other cloud account?, On AWS, can I deploy to services such as EC2, EKS, or Lambda?, Can I access AWS storage services such as S3 or database services such as RDS? How?, Do you plan to support other clouds?, Can I run production apps with Defang?, I'm having trouble running the binary on my Mac. What should I do?, Warnings, \"The folder is not empty. Files may be overwritten.\", \"environment variable not found\", \"Unsupported platform\", \"not logged in\", \"No port mode was specified; assuming 'host'\", \"Published ports are not supported in ingress mode; assuming 'host'\", \"TCP ingress is not supported; assuming HTTP\", \"unsupported compose directive\", \"no reservations specified; using limits as reservations\", \"ingress port without healthcheck defaults to GET / HTTP/1.1\", \"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\", \"The build context contains more than 10 files\", \"AWS provider was selected, but AWS environment variables are not set\", \"Using Defang provider, but AWS environment variables were detected\", Errors, \"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\", \"invalid healthcheck: ingress ports require an HTTP healthcheck on `localhost`., The build aborted with OutOfMemoryError: Container killed due to memory usage",
      "text": "- In the [Defang Playground](./concepts/defang-playground.md) the app is deployed to AWS `us-west-2`. In the [Defang BYOC](./concepts/defang-byoc.md) model, the region is determined by your [Defang BYOC Provider](/docs/category/providers) settings. - Yes! Please check out the [Defang BYOC](./concepts/defang-byoc.md) documentation for more information. - The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources. - Yes, you can access whatever other resources exist in the cloud account you are using as a [Defang BYOC](./concepts/defang-byoc.md) Provider. - While we currently support AWS as a [Defang BYOC](./concepts/defang-byoc.md) Provider, we plan to support other clouds in future releases, such as [Azure](./providers/azure.md) and [GCP](./providers/gcp.md). - The [Defang Playground](./concepts/defang-playground.md) is meant for testing and trial purposes only. Deployment of productions apps with [Defang BYOC](./concepts/defang-byoc.md) is not yet supported and disallowed by the [Terms of Service](https://defang.io/terms-service.html). If you are interested in running production apps, please [contact us](https://defang.io/#Contact-us). - MacOS users will need to allow the binary to run due to security settings: 1. Attempt to run the binary. You'll see a security prompt preventing you from running it. 2. Go to System Preferences > Privacy & Security > General. 3. In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'. 4. Alternatively, select the option \"App Store and identified developers\" to allow all applications from the App Store and identified developers to run. - This message is displayed when you run `defang generate` and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running `defang generate` or pick a different target folder. - This message is displayed when you run `defang compose up` and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run `defang compose up`. - This message is displayed when you run `defang compose up` and the Compose file references a platform that is not supported by Defang. Defang Beta only supports Linux operating systems. - This message is displayed when you run `defang compose config` but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using `defang login`. - This message is displayed when you run `defang compose up` and the Compose file declares a `port` that does not specify a port `mode`. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the `mode` as `ingress`: ``` services: service1: … ports: - target: 80 mode: ingress ``` - This message is displayed when you run `defang compose up` and the Compose file declares a `port` with `mode` set to `ingress` and `published` set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the `mode` as `ingress` and remove the `published` setting. - This message is displayed when you run `defang compose up` and the Compose file declares a `port` with `mode` set to `ingress` and `protocol` set to `tcp`. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the `protocol` setting. - This message is displayed when you run `defang compose up` and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior. - This message is displayed when you run `defang compose up` and the Compose file declares a `resource` with `limits` but no `reservations`. Defang will use the `limits` as `reservations` to ensure the container has enough resources. Specify `reservations` if you want to silence the warning or reserve a different amount of resources: ``` services: service1: … deploy: resources: reservations: cpus: 0.5 memory: 512MB ``` - This message is displayed when you run `defang compose up` and the Compose file declares an `ingress` with a `port` but no `healthcheck`. Defang will assume the default healthcheck of `GET / HTTP/1.1` to ensure the port is healthy. Specify a `healthcheck` if you want to silence the warning or use a different healthcheck: ``` services: service1: … deploy: healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"] ``` - This message is displayed when you run `defang compose up` and the Compose file doesn't specify a `memory` reservation. If available, Defang will use the `memory` limit as the `memory` reservation. Specify a `memory` reservation if you want to silence the warning or reserve a different amount of memory: ``` services: service1: … deploy: resources: reservations: memory: 512MB ``` - This message is displayed when you run `defang compose up` and the Compose file declares a `build` with a `context` that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the `context` as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the `context`. - This message is displayed when you run `defang compose up` with the `--provider=aws` but none of the AWS environment variables were set. If you proceed, the deployment might fail, unless you have defined defined `default` credentials in the AWS configuration files or are running on an AWS instance. - This message is displayed when you run `defang compose up` with the `--provider=defang` but AWS environment variables were detected. The AWS environment variables will be ignored. - This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using `defang version`. - This message is displayed when `defang compose up` tries to deploy a service with an \"ingress\" port, if the service does not have a `healthcheck` which mentions `localhost`. Defang routes a load balancer to your service's ingress ports, and the loadbalancer needs to be able to check the health of the service. To solve this issue, ask yourself these two questions: 1. Should my service be public? It's common to declare your container's ports using the Compose file \"shorthand\" syntax (`1234:1234`). This syntax can be understood as `[HOST:]CONTAINER`. If your service is not intended to be public, you do not need to declare a HOST port. For example: ```diff services: my-service: image: my-image ports: -       - \"1234:1234\" +       - \"1234\" ``` 2. Does my healthcheck include the string `localhost`? It is very common to define a healthcheck by using `curl` or `wget` to make a request to `localhost`. So common, in fact, that defang will look for the string `localhost` in your healthcheck definition. For example, this healthcheck is valid: ```yaml healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:1234/health\"] ``` This healthcheck is not valid for `ingress` ports: ```yaml healthcheck: test: [\"CMD\", \"./my-healthcheck\"] ``` The image build might fail if the build process uses too much memory. The first thing to try is to limit the size of your project by excluding unnecessary files: the easiest way is to create a `.dockerignore` file that excludes irrelevatn files. Note that Defang will use a default `.dockerignore` file if you don't have one, but that default might not work for some projects and it's always better to make a `.dockerignore` file specific to your project. If that doesn't work, you can try to increase the memory available to the build process by adding a field `shm_size` to the `build` section in your `compose.yaml` file: ```yaml services: service1: build: context: . shm_size: 16g ```"
    }
]